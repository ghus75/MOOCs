# -*- coding: utf-8 -*-
"""
Ã‰diteur de Spyder

Ceci est un script temporaire.
"""
import sys

sys.setrecursionlimit(200000)

def number_of_strongly_connected_components(adj, adj_reverse):
    result = 0
    #write your code here
    order = []
    visited = [0] * len(adj)
    
    def explore_rev(u):
        visited[u] = True
        for neighbor in adj_reverse[u]:
            if not visited[neighbor]:
                explore_rev(neighbor)
#        order.append(u)
        order.insert(0,u)
    
    for v in range(len(adj_reverse)):
        if not visited[v]:
            explore_rev(v)
        
    visited = [0] * len(adj)    

    scc = [[] for _ in range(len(adj))]   
    scc_num = 0    
    def explore(u):
        nonlocal scc_num
        visited[u] = True
        scc[scc_num].append(u)        
        for neighbor in adj[u]:
            if not visited[neighbor]:
                explore(neighbor)

    for v in order:
        if not visited[v]:
            explore(v)
            scc_num += 1
            
    result = len([x for x in scc if len(x) != 0])

    return result

#input = sys.stdin.read()
#input = '4 4 1 2 4 1 2 3 3 1'
#input = '5 7 2 1 3 2 3 1 4 3 4 1 5 2 5 3'
input = '9 13 1 6 7 6 7 8 8 7 9 8 4 9 4 2 2 1 5 1 3 5 3 2 1 3 3 8'
input = '10 20 5 3 4 10 3 2 1 3 4 9 2 6 8 3 8 2 6 1 6 10 10 6 1 4 3 8 1 5 8 9 5 1 8 5 7 8 3 4 8 4'
input = '100 500 50 96 41 13 89 11 46 42 12 78 40 22 54 58 78 39 76 100 38 86 18 45 60 29 52 98 64 88 96 5 80 56 42 98 55 100 1 54 5 24 89 12 25 91 66 22 37 91 61 69 75 71 4 73 86 55 41 34 22 12 59 19 63 57 70 44 44 55 76 87 27 6 37 68 98 82 11 72 55 49 27 82 42 6 86 78 51 88 34 32 85 43 49 82 59 14 81 29 69 50 17 84 73 55 27 31 24 40 77 3 47 62 21 55 52 43 79 61 33 60 50 65 13 75 46 11 61 49 57 17 86 59 17 43 20 96 6 87 30 89 65 75 100 32 48 6 27 20 78 25 85 98 83 78 15 39 47 45 21 26 35 43 2 76 17 44 44 28 59 28 36 10 13 56 20 85 50 37 6 96 1 18 24 54 21 57 52 57 20 34 49 99 91 4 79 41 12 93 17 37 65 35 9 15 16 62 40 75 93 32 42 65 55 65 96 30 62 4 75 44 73 12 50 54 58 86 93 75 35 72 71 95 82 85 17 4 49 100 65 2 92 30 10 45 67 20 56 15 40 50 10 55 20 91 77 86 67 64 22 81 20 65 18 70 4 19 22 58 11 67 24 89 86 71 31 35 68 30 96 54 86 57 95 6 31 73 37 38 61 41 72 63 12 22 77 32 25 10 53 23 21 62 64 17 88 14 29 14 1 43 23 56 27 88 91 39 36 52 43 51 67 78 82 10 75 41 39 7 8 91 39 29 85 83 77 13 68 12 94 27 74 69 62 32 99 87 94 61 77 91 32 98 54 22 19 48 52 2 85 92 100 4 30 31 45 93 85 70 12 86 73 64 48 94 55 43 59 44 5 66 13 2 37 5 70 61 60 99 56 67 44 94 89 98 81 68 65 25 79 57 6 31 21 29 58 40 29 45 72 91 100 93 91 32 55 81 60 28 63 49 97 47 36 21 45 62 15 5 82 43 93 91 79 24 53 21 25 50 2 52 98 96 60 78 16 15 6 22 65 52 79 44 59 58 30 53 86 54 10 39 51 80 41 35 53 74 86 40 67 48 44 54 42 66 39 1 22 91 53 30 50 21 20 46 51 40 6 9 54 55 88 61 67 13 31 19 55 54 67 19 13 83 89 34 44 23 68 20 16 50 45 22 69 41 90 67 15 11 63 13 19 76 7 81 25 60 99 5 73 26 54 20 100 6 10 70 64 7 4 16 46 32 47 37 39 72 56 19 26 84 10 51 58 9 44 36 5 64 56 95 77 35 63 16 79 29 88 11 16 10 90 1 94 45 19 90 47 92 1 19 25 14 94 89 29 16 18 87 21 58 54 24 46 50 89 19 25 90 2 44 75 70 21 14 91 59 83 17 66 43 97 38 92 90 71 40 17 82 56 83 35 99 78 12 93 76 35 73 32 69 83 67 59 95 90 19 54 53 18 2 73 67 7 36 32 17 68 22 71 11 88 75 86 33 10 54 93 58 90 65 49 43 13 5 68 67 27 30 25 2 19 52 81 71 34 94 89 7 59 74 55 39 28 92 83 5 42 50 3 82 42 92 71 52 73 1 53 8 58 69 45 82 62 71 33 52 83 62 86 89 36 71 52 89 11 95 24 69 40 63 88 89 1 69 37 32 18 40 81 14 37 10 17 95 39 4 73 10 52 28 7 95 62 100 23 88 27 56 51 39 77 14 86 80 91 7 7 19 62 80 38 76 17 36 65 34 18 35 59 20 75 94 16 63 13 48 76 82 55 64 14 49 50 17 55 20 29 1 100 97 91 28 41 6 68 10 42 5 66 6 27 87 30 32 55 40 85 40 91 40 92 83 40 89 99 35 15 61 82 51 43 85 52 8 50 8 89 99 71 87 76 27 32 52 14 68 61 84 40 20 13 72 5 59 65 60 92 12 93 49 99 66 78 80 76 64 62 55 56 99 55 76 98 47 71 54 71 76 1 48 75 9 30 8 84 59 66 50 21 1 4 79 45 4 91 38 97 79 9 11 23 15 75 91 69 33 34 5 92 95 24 19 25 18 87 8 19 68 33 82 55 99 3 9 95 67 77 12 81 73 36 72 19 16 31 16 79 42 57 32 73 94 4 54 53 84 96 59 69 42 30 78 31 68 28 74 37 49 80 52 94 68 98 27 25 61 15 54 99 2 44 96 55 22 48 99 71 88 53 2 54 9 35 83 22 38 72 79 36 1 16 71 15 17 97 21 94 79 98 18 77 36 99 11 32 80 57 72 49 27'
data = list(map(int, input.split()))
n, m = data[0:2]
data = data[2:]

edges = list(zip(data[0:(2 * m):2], data[1:(2 * m):2]))
rev_edges = [(b,a) for (a,b) in edges]

adj = [[] for _ in range(n)]
adj_reverse = [[] for _ in range(n)]

for (a, b) in edges:
    adj[a - 1].append(b - 1)

for (a, b) in rev_edges:
    adj_reverse[a - 1].append(b - 1)

print(number_of_strongly_connected_components(adj, adj_reverse))